[{"categories":null,"content":"Born and currently living in Brazil, I’m a programmer who started his jorney in 2007 learning how to create tibia server(an old fashioned MMORPG), in the middle of this entire time i have done a bunch of stuffs as a side hustle wile i was studying, like: beeing a web designer, DJ, a bartender, and programming. at the time i was a web master, using more flash than i should, saw the rise of HTML5 and the fall of a lot of thecnoologies like, ASP, FTP, xampp (sorry about that, i always lost the point with the nostalgia), and in 2018 i decided to start to work as a professional software engineer after finished the college. if you want my resume you can check HERE or get the PDF ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"Matheus Barbieri","uri":"/about/"},{"categories":null,"content":"Interests Here you gonna see some posts about some things i like to make tests: Distributed Computing DevOps / GitOps Graphics Computing Reverse Engineering Developer Experience Kernel Programming if you want to know more about the technologies and how i use them, i have my personal Wiki where all my daily basis documentation go, there have infos about: languages frameworks personal repos configurations ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"Matheus Barbieri","uri":"/about/"},{"categories":["GitOps","Automation","CD"],"content":"I’m without motivation enough to write a post talking about how a delivery pipeline should be, how to relate real-state x desired-state or why you should use this or that, i particularly prefer ArgoCD by a simple resource called ApplicationSet. ArgoCD’s ApplicationSet is a awesome feature to a delivery pipeline. it make you specify in a manifest how and where k8s manifests should be appliedthe argocd read the applications sets, and create a pipeline which will apply source from parameters into destinations You have a lot of features to that and i strongly recommend you to look on the DOC, but here i will show you how to use the basic, and how i like to use. The basic structure to an ApplicationSet: apiVersion: argoproj.io/v1alpha1 kind: ApplicationSet metadata: name: \u003cRESOURCE_NAME\u003e spec: generators: - list: elements: - cluster: \u003cCLUSTER_NAME\u003e # variable name could be local, dev prod url: \u003cCLLUSTER_URL\u003e # https://kubernetes.default.svc namespace: \u003cNAMESPACE\u003e # another variable # \u003cVAR_KEY\u003e: \u003cVAR_VALUE\u003e any var you want for the generate application-set template: metadata: name: \u003cAPPLICATION_NAME\u003e # the name of application applied will be local-appllications labels: \u003cLABEL_NAME\u003e: \u003cLABEL_VALUE\u003e spec: project: default destination: server: '{{url}}' # the cluster you want ArgoCD apply the manifest namespace: '{{namespace}}' # the namespace you want this to be applied source: # an example of source in a specific repo repoURL: \u003cREPOSITORY URL\u003e.git targetRevision: \u003cBRANCH\u003e # default in HEAD path: \u003cPATH_OF_KUBERNETES_MANIFEST\u003e the argocd is capable to read directly from a repository or a helm chart, and is capable of read different types of inputs, like a classic kubernetes resource, kustomize and others. ℹ️ one of my favorite tricks is to point to a helm path in a github repository, with this you will know automatically if a new version of apiVersion: argoproj.io/v1alpha1 kind: ApplicationSet metadata: name: sealed-secrets-helm-chart spec: generators: - list: elements: - cluster: local url: https://kubernetes.default.svc namespace: sealed-secrets template: metadata: name: 'sealed-secrets-{{cluster}} labels: type: \"security\" cluster: \"{{cluster}}\" spec: project: default destination: server: '{{url}}' namespace: '{{namespace}}' source: repoURL: https://github.com/bitnami-labs/sealed-secrets targetRevision: HEAD path: helm/sealed-secrets syncPolicy: syncOptions: - CreateNamespace=true this example will install Sealed Secretsusing helm structure but using git repo. And you can construct an repo with multiple application-sets to be installed and create an application-set to check if has a new application-sets to be added. Example: apiVersion: argoproj.io/v1alpha1 kind: ApplicationSet metadata: name: application-set spec: generators: - list: elements: - cluster: local url: https://kubernetes.default.svc namespace: argocd template: metadata: name: '{{cluster}}-applications' labels: general: '{{cluster}}' all: 'argocd' spec: project: default destination: server: '{{url}}' namespace: '{{namespace}}' source: repoURL: https://github.com/MSBarbieri/Argocd-Application-Sets.git targetRevision: HEAD path: . syncPolicy: automated: prune: true allowEmpty: true selfHeal: true retry: limit: 2 backoff: duration: 5s factor: 2 maxDuration: 3m0s ArgoCD is one of the most powerful and extendable delivery pipeline application i have founded until today, and you should at test. ","date":"2022-05-25","objectID":"/argo-application-set/:0:0","tags":[],"title":"Automate Delivery specification with ArgoCD ApplicationSet","uri":"/argo-application-set/"},{"categories":["GitOps","Security"],"content":"One of the most hard problems i have found dealing with multiple-cluster in my jobs is dealing with secrets management, create secrets for each cluster, being sure that secret works, and store them safely. Having a proper control of this issue always be a big mess, mostly because this easily become a safety issue most of the time in companies i have passed, someone have all the secrets stored in their machine or in some dark and scared place, or all of the secrets start to be stored in one private repository where every one in a point of the time will have the access or other horrible solution like that. In my researches about developer experience i have found some people talking about one open-source project called Sealed Secretsand in the moment i looked for it, i instantly fall in love. The concept is really simple and powerful i an application focused on kubernetes, which receive some data and encrypt it and transform into an k8s custom resource. At first you may think “why do i need this, i can only place my secret in my cluster right?” well yes, but when we start to create custom pipelines to improve our deployment process, create multiple clusters, or increase a lot our internal applications, store this secrets and apply them again become a real problem. With sealed secrets we can create the secret based on a specific certificate, and store them anywhere we want, and in the moment we apply that sealed-secret the service will generate the real secret. ","date":"2022-05-04","objectID":"/sealled-secrets/:0:0","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"},{"categories":["GitOps","Security"],"content":"Installing ","date":"2022-05-04","objectID":"/sealled-secrets/:1:0","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"},{"categories":["GitOps","Security"],"content":"Installing sealed secrets kubectl create namespace sealed-secrets helm repo add sealed-secrets https://bitnami-labs.github.io/sealed-secrets helm install sealed-secrets sealed-secrets/sealed-secrets --namespace sealed-secrets --version 2.1.8 ","date":"2022-05-04","objectID":"/sealled-secrets/:1:1","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"},{"categories":["GitOps","Security"],"content":"Installing cli Enter on Release URL and download the version for your machine, in my case will be linux-amd64, here we will do this using wget. wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.17.5/kubeseal-0.17.5-linux-amd64.tar.gz tar -xzf kubeseal-0.17.5-linux-amd64.tar.gz sudo mv kubeseal /usr/local/bin/ ","date":"2022-05-04","objectID":"/sealled-secrets/:1:2","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"},{"categories":["GitOps","Security"],"content":"How To ","date":"2022-05-04","objectID":"/sealled-secrets/:2:0","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"},{"categories":["GitOps","Security"],"content":"Creating a new secret Key Value Secret kubectl create secret generic \u003cYOUR_SECRET\u003e --dry-run=client --from-literal=\u003cKEY\u003e=\u003cVALUE\u003e -o yaml | \\ kubeseal \\ --controller-name=sealed-secrets \\ --controller-namespace=sealed-secrets \\ --format yaml \u003e \u003cSEALED_SECRET_FILE\u003e.yaml File Secret kubectl create secret generic \u003cYOUR_SECRET\u003e --dry-run=client --from-file=\u003cFILE\u003e -o yaml | \\ kubeseal \\ --controller-name=sealed-secrets \\ --controller-namespace=sealed-secrets \\ --format yaml \u003e \u003cSEALED_SECRET_FILE\u003e.yaml ","date":"2022-05-04","objectID":"/sealled-secrets/:2:1","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"},{"categories":["GitOps","Security"],"content":"Applying sealed secret kubectl create -f \u003cSEALED_SECRET_FILE\u003e.yaml ","date":"2022-05-04","objectID":"/sealled-secrets/:2:2","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"},{"categories":["GitOps","Security"],"content":"Certificate Management The sealed secret controller with generate certificates when is deployed, and will generate new certificate at some period of time, but you can add your own certificates. ℹ️ when a new certificate is added, the old ones isn’t deleted, so old generated sealed secrets can be added again if you have the cert applied. ","date":"2022-05-04","objectID":"/sealled-secrets/:3:0","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"},{"categories":["GitOps","Security"],"content":"adding a new cert kubectl -n sealed-secrets create secret tls \u003cCERT_NAME\u003e --cert=\u003cPUBLIC_KEY_FILE\u003e --key=\u003cPRIVATE_KEY_FILE\u003e kubectl -n sealed-secrets label secret \u003cCERT_NAME\u003e sealedsecrets.bitnami.com/sealed-secrets-key=active after that restart the sealed secrets controller pod, and you are good to go, now you can get all the encrypted secrets you created and can put into a repository without fear. This are the first steps to deal with sealed secrets, if you want to understand more about what Sealed Secrets really works i recommended you to follow the Project Repository. ","date":"2022-05-04","objectID":"/sealled-secrets/:3:1","tags":[],"title":"Managing multi-cluster secrets with Sealed Secrets","uri":"/sealled-secrets/"}]